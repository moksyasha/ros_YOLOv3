#!/usr/bin/env python
# Author: melovan

import rospy
import actionlib
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from actionlib_msgs.msg import *

import numpy as np
import cv2 as cv
from std_msgs.msg import Float64
from geometry_msgs.msg import Twist
from geometry_msgs.msg import Pose
from std_msgs.msg import String
from std_msgs.msg import Int8
from nav_msgs.msg import Odometry
from std_msgs.msg import UInt8


class Constr():
    def __init__(self):
        
        self.odom_sub = rospy.Subscriber('/odom', Odometry, self.cbOdom)
        self.pub_cmd_vel = rospy.Publisher('/constr/cmd_vel', Twist, queue_size = 1)
        
        self.sub_right = rospy.Subscriber('/detect/yellow_line_reliability', UInt8, self.cbYellow, queue_size = 1)
        self.sub_left = rospy.Subscriber('/detect/white_line_reliability', UInt8, self.cbWhite, queue_size = 1)
        self.pub_finish = rospy.Publisher('/robot_finish', String, queue_size = 1)
        self.manager_control = rospy.Publisher('/manager_control', Int8, queue_size = 1)
        self.pub_node_id = rospy.Publisher('/launch_id', Int8, queue_size = 1)

        self.z = rospy.Publisher('/z', Float64, queue_size = 1)
        self.time = rospy.Publisher('/time', Float64, queue_size = 1)
        self.c = 0

        self.left = 0
        self.right = 0
        self.obstforw = 0
        self.obstright = 0
        self.obst = 1
        self.miss = 0
        self.flag = 1
        self.rleft = 0
        self.rright = 0
        self.start = 1
        self.twist = Twist()
        self.pose = Pose()

        rospy.on_shutdown(self.fnShutDown)

    def cbOdom(self,odom):
        self.pose = odom.pose.pose
            
    def cbWhite(self, reliabilityw_msg):
        if reliabilityw_msg.data > 80:
            self.left = 1
        if reliabilityw_msg.data == 0:
            self.left = 0
    
    def cbYellow(self, reliabilityy_msg):
        if reliabilityy_msg.data > 80:
            self.right = 1
        if reliabilityy_msg.data == 0:
            self.right = 0            


    def fnShutDown(self):
        rospy.loginfo("Shutting down. cmd_vel will be 0")


    def movebase_client(self,x,y,z,w):

        client = actionlib.SimpleActionClient('move_base',MoveBaseAction)
        client.wait_for_server()

        goal = MoveBaseGoal()
        goal.target_pose.header.frame_id = "map"
        goal.target_pose.header.stamp = rospy.Time.now()
        goal.target_pose.pose.position.x = x
        goal.target_pose.pose.position.y = y
        goal.target_pose.pose.orientation.z = z
        goal.target_pose.pose.orientation.w = w

        client.send_goal(goal)
        client.wait_for_result()
        return client.get_result()       


    def main(self):
        self.movebase_client(-1.71,-0.277,-0.65,0.75)
        result = self.movebase_client(0.1,-1.73,-0.1,1)
        #self.movebase_client(1.01,-1.743,0.1,-1)
        if result:
            rospy.sleep(1)
            self.pub_finish.publish("moryachki_finish")

            twist = Twist()
            self.pub_cmd_vel.publish(twist)
            self.manager_control.publish(0)
            self.pub_node_id.publish(4)

        rospy.spin()


if __name__ == '__main__':
    rospy.init_node('Constr')
    node = Constr()
    node.main()
